// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (nome, descricao, preco, data_venda) VALUES ($1, $2, $3, $4) RETURNING id, nome, descricao, preco, data_venda
`

type CreateProductParams struct {
	Nome      string    `json:"nome"`
	Descricao string    `json:"descricao"`
	Preco     string    `json:"preco"`
	DataVenda time.Time `json:"data_venda"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Nome,
		arg.Descricao,
		arg.Preco,
		arg.DataVenda,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Preco,
		&i.DataVenda,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, nome, descricao, preco, data_venda FROM products WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Preco,
		&i.DataVenda,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, nome, descricao, preco, data_venda FROM products
`

func (q *Queries) ListProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Preco,
			&i.DataVenda,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET nome = $2, descricao = $3, preco = $4, data_venda = $5 WHERE id = $1 RETURNING id, nome, descricao, preco, data_venda
`

type UpdateProductParams struct {
	ID        int32     `json:"id"`
	Nome      string    `json:"nome"`
	Descricao string    `json:"descricao"`
	Preco     string    `json:"preco"`
	DataVenda time.Time `json:"data_venda"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Nome,
		arg.Descricao,
		arg.Preco,
		arg.DataVenda,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Preco,
		&i.DataVenda,
	)
	return i, err
}
